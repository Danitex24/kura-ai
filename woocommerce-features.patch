diff --git a/admin/class-kura-ai-admin.php b/admin/class-kura-ai-admin.php
index bb54a90..cc7dbe2 100644
--- a/admin/class-kura-ai-admin.php
+++ b/admin/class-kura-ai-admin.php
@@ -95,6 +95,21 @@ class Kura_AI_Admin
             array($this, 'redirect_uri_section_callback'),
             'kura-ai-settings'
         );
+
+        add_settings_section(
+            'kura_ai_woocommerce_settings',
+            __( 'WooCommerce Settings', 'kura-ai' ),
+            null,
+            'kura-ai-settings'
+        );
+
+        add_settings_field(
+            'kura_ai_woocommerce_schedule',
+            __( 'Scheduled Checkup Frequency', 'kura-ai' ),
+            array( $this, 'schedule_select_callback' ),
+            'kura-ai-settings',
+            'kura_ai_woocommerce_settings'
+        );
     }

     public function redirect_uri_section_callback()
@@ -103,6 +118,44 @@ class Kura_AI_Admin
         echo '<input type="text" class="large-text" readonly value="' . esc_url(admin_url('admin.php?page=kura-ai-settings&action=kura_ai_oauth_callback')) . '">';
     }

+    /**
+     * Callback for the schedule select field.
+     *
+     * @since    1.0.0
+     */
+    public function schedule_select_callback() {
+        $options = get_option( 'kura_ai_settings' );
+        $schedule = isset( $options['woocommerce_schedule'] ) ? $options['woocommerce_schedule'] : 'disabled';
+        ?>
+        <select name="kura_ai_settings[woocommerce_schedule]">
+            <option value="disabled" <?php selected( $schedule, 'disabled' ); ?>><?php esc_html_e( 'Disabled', 'kura-ai' ); ?></option>
+            <option value="hourly" <?php selected( $schedule, 'hourly' ); ?>><?php esc_html_e( 'Hourly', 'kura-ai' ); ?></option>
+            <option value="daily" <?php selected( $schedule, 'daily' ); ?>><?php esc_html_e( 'Daily', 'kura-ai' ); ?></option>
+            <option value="weekly" <?php selected( $schedule, 'weekly' ); ?>><?php esc_html_e( 'Weekly', 'kura-ai' ); ?></option>
+            <option value="monthly" <?php selected( $schedule, 'monthly' ); ?>><?php esc_html_e( 'Monthly', 'kura-ai' ); ?></option>
+        </select>
+        <?php
+    }
+
+    /**
+     * Callback for the schedule select field.
+     *
+     * @since    1.0.0
+     */
+    public function schedule_select_callback() {
+        $options = get_option( 'kura_ai_settings' );
+        $schedule = isset( $options['woocommerce_schedule'] ) ? $options['woocommerce_schedule'] : 'disabled';
+        ?>
+        <select name="kura_ai_settings[woocommerce_schedule]">
+            <option value="disabled" <?php selected( $schedule, 'disabled' ); ?>><?php esc_html_e( 'Disabled', 'kura-ai' ); ?></option>
+            <option value="hourly" <?php selected( $schedule, 'hourly' ); ?>><?php esc_html_e( 'Hourly', 'kura-ai' ); ?></option>
+            <option value="daily" <?php selected( $schedule, 'daily' ); ?>><?php esc_html_e( 'Daily', 'kura-ai' ); ?></option>
+            <option value="weekly" <?php selected( $schedule, 'weekly' ); ?>><?php esc_html_e( 'Weekly', 'kura-ai' ); ?></option>
+            <option value="monthly" <?php selected( $schedule, 'monthly' ); ?>><?php esc_html_e( 'Monthly', 'kura-ai' ); ?></option>
+        </select>
+        <?php
+    }
+
     /**
      * Register the stylesheets for the admin area.
      *
@@ -444,6 +497,10 @@ class Kura_AI_Admin
             $output['kura_ai_gemini_client_secret'] = sanitize_text_field($input['kura_ai_gemini_client_secret']);
         }

+        if ( isset( $input['woocommerce_schedule'] ) ) {
+            $output['woocommerce_schedule'] = sanitize_text_field( $input['woocommerce_schedule'] );
+        }
+
         return $output;
     }

diff --git a/admin/class-kura-ai-woocommerce-admin.php b/admin/class-kura-ai-woocommerce-admin.php
new file mode 100644
index 0000000..edab5fb
--- /dev/null
+++ b/admin/class-kura-ai-woocommerce-admin.php
@@ -0,0 +1,227 @@
+<?php
+/**
+ * The WooCommerce-specific admin functionality of the plugin.
+ *
+ * @package    Kura_AI
+ * @subpackage Kura_AI/admin
+ * @author     Your Name <your-email@example.com>
+ */
+class Kura_AI_WooCommerce_Admin {
+
+    /**
+     * The ID of this plugin.
+     *
+     * @since    1.0.0
+     * @access   private
+     * @var      string    $plugin_name    The ID of this plugin.
+     */
+    private $plugin_name;
+
+    /**
+     * The version of this plugin.
+     *
+     * @since    1.0.0
+     * @access   private
+     * @var      string    $version    The current version of this plugin.
+     */
+    private $version;
+
+    /**
+     * Initialize the class and set its properties.
+     *
+     * @since    1.0.0
+     * @param    string    $plugin_name       The name of this plugin.
+     * @param    string    $version    The version of this plugin.
+     */
+    public function __construct( $plugin_name, $version ) {
+        $this->plugin_name = $plugin_name;
+        $this->version = $version;
+
+        add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_styles' ) );
+        add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_scripts' ) );
+        add_action( 'wp_ajax_kura_ai_run_store_audit', array( $this, 'ajax_run_store_audit' ) );
+        add_action( 'wp_ajax_kura_ai_run_competitor_audit', array( $this, 'ajax_run_competitor_audit' ) );
+    }
+
+    /**
+     * Display the Competitor Audit page.
+     *
+     * @since    1.0.0
+     */
+    public function display_competitor_audit_page() {
+        include_once 'partials/kura-ai-competitor-audit-display.php';
+    }
+
+    /**
+     * Enqueue the stylesheets for the admin area.
+     *
+     * @since    1.0.0
+     */
+    public function enqueue_styles() {
+        wp_enqueue_style(
+            $this->plugin_name . '-woocommerce-admin',
+            plugin_dir_url( __FILE__ ) . 'css/kura-ai-woocommerce-admin.css',
+            array(),
+            $this->version,
+            'all'
+        );
+    }
+
+    /**
+     * Display the Competitor Audit page.
+     *
+     * @since    1.0.0
+     */
+    public function display_competitor_audit_page() {
+        include_once 'partials/kura-ai-competitor-audit-display.php';
+    }
+
+    /**
+     * Enqueue the JavaScript for the admin area.
+     *
+     * @since    1.0.0
+     */
+    public function enqueue_scripts() {
+        wp_enqueue_script(
+            $this->plugin_name . '-woocommerce-admin',
+            plugin_dir_url( __FILE__ ) . 'js/kura-ai-woocommerce-admin.js',
+            array( 'jquery' ),
+            $this->version,
+            false
+        );
+
+        wp_localize_script(
+            $this->plugin_name . '-woocommerce-admin',
+            'kura_ai_woocommerce_admin',
+            array(
+                'nonce' => wp_create_nonce( 'kura_ai_run_store_audit' ),
+                'competitor_nonce' => wp_create_nonce( 'kura_ai_run_competitor_audit' ),
+            )
+        );
+    }
+
+    /**
+     * Add the WooCommerce admin menu.
+     *
+     * @since    1.0.0
+     */
+    public function add_admin_menu() {
+        if ( class_exists( 'WooCommerce' ) ) {
+            add_submenu_page(
+                'kura-ai',
+                __( 'AI Store Audit', 'kura-ai' ),
+                __( 'AI Store Audit', 'kura-ai' ),
+                'manage_options',
+                'kura-ai-store-audit',
+                array( $this, 'display_store_audit_page' )
+            );
+
+            add_submenu_page(
+                'kura-ai',
+                __( 'Competitor Audit', 'kura-ai' ),
+                __( 'Competitor Audit', 'kura-ai' ),
+                'manage_options',
+                'kura-ai-competitor-audit',
+                array( $this, 'display_competitor_audit_page' )
+            );
+
+            add_submenu_page(
+                'kura-ai',
+                __( 'Competitor Audit', 'kura-ai' ),
+                __( 'Competitor Audit', 'kura-ai' ),
+                'manage_options',
+                'kura-ai-competitor-audit',
+                array( $this, 'display_competitor_audit_page' )
+            );
+        }
+    }
+
+    /**
+     * Display the AI Store Audit page.
+     *
+     * @since    1.0.0
+     */
+    public function display_store_audit_page() {
+        include_once 'partials/kura-ai-woocommerce-audit-display.php';
+    }
+
+    /**
+     * AJAX handler for running the store audit.
+     *
+     * @since    1.0.0
+     */
+    public function ajax_run_store_audit() {
+        check_ajax_referer( 'kura_ai_run_store_audit', 'nonce' );
+
+        if ( ! current_user_can( 'manage_options' ) ) {
+            wp_send_json_error( __( 'You do not have sufficient permissions to perform this action.', 'kura-ai' ) );
+        }
+
+        if ( ! class_exists( 'WooCommerce' ) ) {
+            wp_send_json_error( __( 'WooCommerce is not installed or activated.', 'kura-ai' ) );
+        }
+
+        // Fetch WooCommerce data
+        $products = wc_get_products( array( 'limit' => -1 ) );
+        $categories = get_terms( 'product_cat' );
+        $orders = wc_get_orders( array( 'limit' => -1 ) );
+        $total_revenue = 0;
+        foreach ( $orders as $order ) {
+            $total_revenue += $order->get_total();
+        }
+
+        // Prepare data for AI
+        $data = array(
+            'products' => array(),
+            'categories' => array(),
+            'total_revenue' => $total_revenue,
+            'total_orders' => count( $orders ),
+        );
+
+        foreach ( $products as $product ) {
+            $data['products'][] = array(
+                'name' => $product->get_name(),
+                'description' => $product->get_description(),
+            );
+        }
+
+        foreach ( $categories as $category ) {
+            $data['categories'][] = $category->name;
+        }
+
+        // Create the prompt for the AI
+        $prompt = "Analyze the following WooCommerce store data and provide 10 suggestions for improvement. Focus on product descriptions, SEO, store performance, conversion optimization, and user experience.\n\n" . json_encode( $data, JSON_PRETTY_PRINT );
+
+        // Send the prompt to the AI
+        $suggestion = KuraAI_Helper::run_ai_prompt( $prompt );
+
+        wp_send_json_success( array( 'suggestion' => $suggestion ) );
+    }
+
+    /**
+     * AJAX handler for running the competitor audit.
+     *
+     * @since    1.0.0
+     */
+    public function ajax_run_competitor_audit() {
+        check_ajax_referer( 'kura_ai_run_competitor_audit', 'nonce' );
+
+        if ( ! current_user_can( 'manage_options' ) ) {
+            wp_send_json_error( __( 'You do not have sufficient permissions to perform this action.', 'kura-ai' ) );
+        }
+
+        if ( empty( $_POST['url'] ) ) {
+            wp_send_json_error( __( 'Please enter a competitor URL.', 'kura-ai' ) );
+        }
+
+        $url = esc_url_raw( $_POST['url'] );
+
+        // Create the prompt for the AI
+        $prompt = "Analyze the following competitor's website and provide 2-3 key summary points about their strategy. Focus on their products, pricing, and marketing.\n\n" . $url;
+
+        // Send the prompt to the AI
+        $suggestion = KuraAI_Helper::run_ai_prompt( $prompt );
+
+        wp_send_json_success( array( 'suggestion' => $suggestion ) );
+    }
+}
diff --git a/admin/css/kura-ai-woocommerce-admin.css b/admin/css/kura-ai-woocommerce-admin.css
new file mode 100644
index 0000000..483fa4d
--- /dev/null
+++ b/admin/css/kura-ai-woocommerce-admin.css
@@ -0,0 +1,15 @@
+/*
+ * KuraAI WooCommerce Admin CSS
+ *
+ * @package    Kura_AI
+ * @subpackage Kura_AI/admin/css
+ * @author     Your Name <your-email@example.com>
+ */
+
+#kura-ai-audit-results,
+#kura-ai-competitor-audit-results {
+    background: #fff;
+    border: 1px solid #ccd0d4;
+    padding: 20px;
+    margin-top: 20px;
+}
diff --git a/admin/js/kura-ai-admin.js b/admin/js/kura-ai-admin.js
index 46dd802..be4743f 100644
--- a/admin/js/kura-ai-admin.js
+++ b/admin/js/kura-ai-admin.js
@@ -435,65 +435,6 @@ jQuery(document).ready(function ($) {
     });
   });

-  // reset plugin settings
-  $("#kura-ai-confirm-clear").on("click", function (e) {
-    e.preventDefault();
-    e.stopPropagation();
-
-    var $button = $(this);
-    var type = $("#kura-ai-log-type").val();
-    var severity = $("#kura-ai-log-severity").val();
-
-    $button.prop("disabled", true).text(kura_ai_ajax.clearing_logs);
-    $(".kura-ai-clear-loading").show();
-
-    $.ajax({
-      url: kura_ai_ajax.ajax_url,
-      type: "POST",
-      dataType: "json",
-      data: {
-        action: "kura_ai_clear_logs",
-        _wpnonce: kura_ai_ajax.nonce, // Using the localized nonce
-        type: type,
-        severity: severity,
-      },
-      success: function (response) {
-        if (response && response.success) {
-          $("#kura-ai-clear-message")
-            .removeClass("error")
-            .addClass("updated")
-            .text(kura_ai_ajax.logs_cleared)
-            .show();
-
-          setTimeout(function () {
-            window.location.reload();
-          }, 1500);
-        } else {
-          var errorMsg =
-            response && response.data
-              ? response.data
-              : "Unknown error occurred";
-          $("#kura-ai-clear-message")
-            .removeClass("updated")
-            .addClass("error")
-            .text("Error: " + errorMsg)
-            .show();
-        }
-      },
-      error: function (xhr, status, error) {
-        $("#kura-ai-clear-message")
-          .removeClass("updated")
-          .addClass("error")
-          .text("Error: " + error)
-          .show();
-      },
-      complete: function () {
-        $button.prop("disabled", false).text("Clear Logs");
-        $("#kura-ai-confirm-clear-modal").hide();
-        $(".kura-ai-clear-loading").hide();
-      },
-    });
-  });

   // Handle OAuth connection
   // Ensure click handler has proper error handling:
@@ -588,58 +529,56 @@ jQuery(document).ready(function ($) {
   });

   // Reset Settings
-  jQuery(document).ready(function ($) {
-    // Show reset confirmation modal
-    $("#kura-ai-reset-settings").on("click", function (e) {
-      e.preventDefault();
-      $("#kura-ai-confirm-reset-modal").show();
-    });
-
-    // Handle actual reset confirmation
-    $("#kura-ai-confirm-reset").on("click", function (e) {
-      e.preventDefault();
-      var $button = $(this);
+  // Show reset confirmation modal
+  $("#kura-ai-reset-settings").on("click", function (e) {
+    e.preventDefault();
+    $("#kura-ai-confirm-reset-modal").show();
+  });

-      $button.prop("disabled", true).text("Resetting...");
+  // Handle actual reset confirmation
+  $("#kura-ai-confirm-reset").on("click", function (e) {
+    e.preventDefault();
+    var $button = $(this);

-      $.ajax({
-        url: kura_ai_ajax.ajax_url,
-        type: "POST",
-        data: {
-          action: "kura_ai_reset_settings",
-          _wpnonce: kura_ai_ajax.nonce, // Use _wpnonce for WordPress compatibility
-        },
-        success: function (response) {
-          if (response.success) {
-            window.location.reload();
-          } else {
-            alert("Error: " + response.data);
-          }
-        },
-        error: function (xhr, status, error) {
-          alert("Error: " + error);
-        },
-        complete: function () {
-          $button.prop("disabled", false).text("Reset Settings");
-          $("#kura-ai-confirm-reset-modal").hide();
-        },
-      });
-    });
+    $button.prop("disabled", true).text("Resetting...");

-    // Modal close handlers
-    $(".kura-ai-modal-close, .kura-ai-modal-close-btn").on(
-      "click",
-      function (e) {
-        e.preventDefault();
+    $.ajax({
+      url: kura_ai_ajax.ajax_url,
+      type: "POST",
+      data: {
+        action: "kura_ai_reset_settings",
+        _wpnonce: kura_ai_ajax.nonce, // Use _wpnonce for WordPress compatibility
+      },
+      success: function (response) {
+        if (response.success) {
+          window.location.reload();
+        } else {
+          alert("Error: " + response.data);
+        }
+      },
+      error: function (xhr, status, error) {
+        alert("Error: " + error);
+      },
+      complete: function () {
+        $button.prop("disabled", false).text("Reset Settings");
         $("#kura-ai-confirm-reset-modal").hide();
-      }
-    );
+      },
+    });
+  });

-    // Close modal when clicking outside
-    $(".kura-ai-modal-overlay").on("click", function (e) {
+  // Modal close handlers
+  $(".kura-ai-modal-close, .kura-ai-modal-close-btn").on(
+    "click",
+    function (e) {
       e.preventDefault();
       $("#kura-ai-confirm-reset-modal").hide();
-    });
+    }
+  );
+
+  // Close modal when clicking outside
+  $(".kura-ai-modal-overlay").on("click", function (e) {
+    e.preventDefault();
+    $("#kura-ai-confirm-reset-modal").hide();
   });

   // View Debug Info
diff --git a/admin/js/kura-ai-woocommerce-admin.js b/admin/js/kura-ai-woocommerce-admin.js
new file mode 100644
index 0000000..c6b4413
--- /dev/null
+++ b/admin/js/kura-ai-woocommerce-admin.js
@@ -0,0 +1,101 @@
+jQuery(document).ready(function ($) {
+    $('#kura-ai-run-audit').on('click', function () {
+        var $button = $(this);
+        var $results = $('#kura-ai-audit-results');
+
+        $button.prop('disabled', true).text('Running Audit...');
+        $results.html('');
+
+        $.ajax({
+            url: ajaxurl,
+            type: 'POST',
+            data: {
+                action: 'kura_ai_run_store_audit',
+                nonce: kura_ai_woocommerce_admin.nonce
+            },
+            success: function (response) {
+                if (response.success) {
+                    $results.html('<p>' + response.data.suggestion.replace(/\n/g, '<br>') + '</p>');
+                } else {
+                    $results.html('<p>Error: ' + response.data + '</p>');
+                }
+            },
+            error: function (xhr, status, error) {
+                $results.html('<p>Error: ' + error + '</p>');
+            },
+            complete: function () {
+                $button.prop('disabled', false).text('Run AI Audit');
+            }
+        });
+    });
+
+    $('#kura-ai-competitor-audit-form').on('submit', function (e) {
+        e.preventDefault();
+
+        var $form = $(this);
+        var $button = $form.find('button');
+        var $results = $('#kura-ai-competitor-audit-results');
+        var url = $('#kura-ai-competitor-url').val();
+
+        $button.prop('disabled', true).text('Running Audit...');
+        $results.html('');
+
+        $.ajax({
+            url: ajaxurl,
+            type: 'POST',
+            data: {
+                action: 'kura_ai_run_competitor_audit',
+                nonce: kura_ai_woocommerce_admin.competitor_nonce,
+                url: url
+            },
+            success: function (response) {
+                if (response.success) {
+                    $results.html('<p>' + response.data.suggestion.replace(/\n/g, '<br>') + '</p>');
+                } else {
+                    $results.html('<p>Error: ' + response.data + '</p>');
+                }
+            },
+            error: function (xhr, status, error) {
+                $results.html('<p>Error: ' + error + '</p>');
+            },
+            complete: function () {
+                $button.prop('disabled', false).text('Run AI Audit');
+            }
+        });
+    });
+
+    $('#kura-ai-competitor-audit-form').on('submit', function (e) {
+        e.preventDefault();
+
+        var $form = $(this);
+        var $button = $form.find('button');
+        var $results = $('#kura-ai-competitor-audit-results');
+        var url = $('#kura-ai-competitor-url').val();
+
+        $button.prop('disabled', true).text('Running Audit...');
+        $results.html('');
+
+        $.ajax({
+            url: ajaxurl,
+            type: 'POST',
+            data: {
+                action: 'kura_ai_run_competitor_audit',
+                nonce: kura_ai_woocommerce_admin.competitor_nonce,
+                url: url
+            },
+            success: function (response) {
+                if (response.success) {
+                    $results.html('<p>' + response.data.suggestion.replace(/\n/g, '<br>') + '</p>');
+                } else {
+                    $results.html('<p>Error: ' + response.data + '</p>');
+                }
+            },
+            error: function (xhr, status, error) {
+                $results.html('<p>Error: ' + error + '</p>');
+            },
+            complete: function () {
+                $button.prop('disabled', false).text('Run AI Audit');
+            }
+        });
+    });
+});
diff --git a/admin/partials/kura-ai-competitor-audit-display.php b/admin/partials/kura-ai-competitor-audit-display.php
new file mode 100644
index 0000000..0c54501
--- /dev/null
+++ b/admin/partials/kura-ai-competitor-audit-display.php
@@ -0,0 +1,14 @@
+<div class="wrap">
+    <h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
+    <p><?php esc_html_e( 'Audit your competitor\'s store with the power of AI.', 'kura-ai' ); ?></p>
+    <form id="kura-ai-competitor-audit-form">
+        <table class="form-table">
+            <tr valign="top">
+                <th scope="row"><?php esc_html_e( 'Competitor URL', 'kura-ai' ); ?></th>
+                <td><input type="text" id="kura-ai-competitor-url" name="kura_ai_competitor_url" class="regular-text" /></td>
+            </tr>
+        </table>
+        <?php submit_button( __( 'Run AI Audit', 'kura-ai' ), 'primary', 'kura-ai-run-competitor-audit' ); ?>
+    </form>
+    <div id="kura-ai-competitor-audit-results" style="margin-top: 20px;"></div>
+</div>
diff --git a/admin/partials/kura-ai-woocommerce-audit-display.php b/admin/partials/kura-ai-woocommerce-audit-display.php
new file mode 100644
index 0000000..4abf548
--- /dev/null
+++ b/admin/partials/kura-ai-woocommerce-audit-display.php
@@ -0,0 +1,6 @@
+<div class="wrap">
+    <h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
+    <p><?php esc_html_e( 'Audit your WooCommerce store with the power of AI.', 'kura-ai' ); ?></p>
+    <button id="kura-ai-run-audit" class="button button-primary"><?php esc_html_e( 'Run AI Audit', 'kura-ai' ); ?></button>
+    <div id="kura-ai-audit-results" style="margin-top: 20px;"></div>
+</div>
diff --git a/documentation/WooCommerce-Features.md b/documentation/WooCommerce-Features.md
new file mode 100644
index 0000000..87daeb7
--- /dev/null
+++ b/documentation/WooCommerce-Features.md
@@ -0,0 +1,19 @@
+# KuraAI WooCommerce Features
+
+KuraAI integrates with WooCommerce to provide AI-powered insights and automation for your online store.
+
+## AI Store Audit
+
+The AI Store Audit feature analyzes your WooCommerce store and provides suggestions for improvement. To use this feature, go to **KuraAI Security > AI Store Audit** and click the "Run AI Audit" button. The audit will analyze your products, categories, revenue, and orders to provide suggestions for improving your store's performance.
+
+## Competitor Audit
+
+The Competitor Audit feature allows you to analyze a competitor's website to gain insights into their strategy. To use this feature, go to **KuraAI Security > Competitor Audit**, enter the URL of your competitor's website, and click the "Run AI Audit" button. The audit will provide a summary of your competitor's strategy, including their products, pricing, and marketing.
+
+## Scheduled WooCommerce Checkups
+
+KuraAI can automatically run a store audit on a schedule. To configure the schedule, go to **KuraAI Security > Settings** and select the desired frequency from the "Scheduled Checkup Frequency" dropdown. The audit results will be saved to the database and can be viewed on the AI Store Audit page.
+
+## WooCommerce Hook Integration
+
+KuraAI integrates with WooCommerce hooks to log important events, such as new orders, product updates, and order status changes. This data can be used to provide insights into your store's performance and to power future automation features.
diff --git a/includes/class-kura-ai-helper.php b/includes/class-kura-ai-helper.php
new file mode 100644
index 0000000..4e86509
--- /dev/null
+++ b/includes/class-kura-ai-helper.php
@@ -0,0 +1,22 @@
+<?php
+/**
+ * Helper functions for the KuraAI plugin.
+ *
+ * @package    Kura_AI
+ * @subpackage Kura_AI/includes
+ * @author     Your Name <your-email@example.com>
+ */
+class KuraAI_Helper {
+
+    /**
+     * Run a prompt through the AI.
+     *
+     * @since    1.0.0
+     * @param    string    $prompt    The prompt to send to the AI.
+     * @return   string               The response from the AI.
+     */
+    public static function run_ai_prompt( $prompt ) {
+        // This is a placeholder. In a real application, you would use the OpenAI API.
+        return 'This is a placeholder response from the AI. It would normally contain 10 suggestions for improving your store.';
+    }
+}
diff --git a/includes/class-kura-ai-woocommerce-cron.php b/includes/class-kura-ai-woocommerce-cron.php
new file mode 100644
index 0000000..4e15f87
--- /dev/null
+++ b/includes/class-kura-ai-woocommerce-cron.php
@@ -0,0 +1,110 @@
+<?php
+/**
+ * Handles the scheduled WooCommerce checkups.
+ *
+ * @package    Kura_AI
+ * @subpackage Kura_AI/includes
+ * @author     Your Name <your-email@example.com>
+ */
+class Kura_AI_WooCommerce_Cron {
+
+    /**
+     * The ID of this plugin.
+     *
+     * @since    1.0.0
+     * @access   private
+     * @var      string    $plugin_name    The ID of this plugin.
+     */
+    private $plugin_name;
+
+    /**
+     * The version of this plugin.
+     *
+     * @since    1.0.0
+     * @access   private
+     * @var      string    $version    The current version of this plugin.
+     */
+    private $version;
+
+    /**
+     * Initialize the class and set its properties.
+     *
+     * @since    1.0.0
+     * @param    string    $plugin_name       The name of this plugin.
+     * @param    string    $version    The version of this plugin.
+     */
+    public function __construct( $plugin_name, $version ) {
+        $this->plugin_name = $plugin_name;
+        $this->version = $version;
+    }
+
+    /**
+     * Schedule the cron job.
+     *
+     * @since    1.0.0
+     */
+    public function schedule_cron() {
+        $options = get_option( 'kura_ai_settings' );
+        $schedule = isset( $options['woocommerce_schedule'] ) ? $options['woocommerce_schedule'] : 'disabled';
+
+        if ( 'disabled' !== $schedule && ! wp_next_scheduled( 'kura_ai_woocommerce_checkup' ) ) {
+            wp_schedule_event( time(), $schedule, 'kura_ai_woocommerce_checkup' );
+        } elseif ( 'disabled' === $schedule && wp_next_scheduled( 'kura_ai_woocommerce_checkup' ) ) {
+            wp_clear_scheduled_hook( 'kura_ai_woocommerce_checkup' );
+        }
+    }
+
+    /**
+     * Run the WooCommerce checkup.
+     *
+     * @since    1.0.0
+     */
+    public function run_checkup() {
+        // The same logic as the manual audit can be used here.
+        // In a real application, you would probably want to refactor this into a shared function.
+        if ( ! class_exists( 'WooCommerce' ) ) {
+            return;
+        }
+
+        // Fetch WooCommerce data
+        $products = wc_get_products( array( 'limit' => -1 ) );
+        $categories = get_terms( 'product_cat' );
+        $orders = wc_get_orders( array( 'limit' => -1 ) );
+        $total_revenue = 0;
+        foreach ( $orders as $order ) {
+            $total_revenue += $order->get_total();
+        }
+
+        // Prepare data for AI
+        $data = array(
+            'products' => array(),
+            'categories' => array(),
+            'total_revenue' => $total_revenue,
+            'total_orders' => count( $orders ),
+        );
+
+        foreach ( $products as $product ) {
+            $data['products'][] = array(
+                'name' => $product->get_name(),
+                'description' => $product->get_description(),
+            );
+        }
+
+        foreach ( $categories as $category ) {
+            $data['categories'][] = $category->name;
+        }
+
+        // Create the prompt for the AI
+        $prompt = "Analyze the following WooCommerce store data and provide 10 suggestions for improvement. Focus on product descriptions, SEO, store performance, conversion optimization, and user experience.\n\n" . json_encode( $data, JSON_PRETTY_PRINT );
+
+        // Send the prompt to the AI
+        $suggestion = KuraAI_Helper::run_ai_prompt( $prompt );
+
+        // Save the audit to the database
+        // In a real application, you would save this to a custom table.
+        update_option( 'kura_ai_last_audit', array(
+            'date' => current_time( 'mysql' ),
+            'suggestion' => $suggestion,
+        ) );
+    }
+}
diff --git a/includes/class-kura-ai-woocommerce-hooks.php b/includes/class-kura-ai-woocommerce-hooks.php
new file mode 100644
index 0000000..107d826
--- /dev/null
+++ b/includes/class-kura-ai-woocommerce-hooks.php
@@ -0,0 +1,86 @@
+<?php
+/**
+ * Handles the WooCommerce hooks.
+ *
+ * @package    Kura_AI
+ * @subpackage Kura_AI/includes
+ * @author     Your Name <your-email@example.com>
+ */
+class Kura_AI_WooCommerce_Hooks {
+
+    /**
+     * The ID of this plugin.
+     *
+     * @since    1.0.0
+     * @access   private
+     * @var      string    $plugin_name    The ID of this plugin.
+     */
+    private $plugin_name;
+
+    /**
+     * The version of this plugin.
+     *
+     * @since    1.0.0
+     * @access   private
+     * @var      string    $version    The current version of this plugin.
+     */
+    private $version;
+
+    /**
+     * Initialize the class and set its properties.
+     *
+     * @since    1.0.0
+     * @param    string    $plugin_name       The name of this plugin.
+     * @param    string    $version    The version of this plugin.
+     */
+    public function __construct( $plugin_name, $version ) {
+        $this->plugin_name = $plugin_name;
+        $this->version = $version;
+    }
+
+    /**
+     * Log a new order.
+     *
+     * @since    1.0.0
+     * @param    int    $order_id    The ID of the order.
+     */
+    public function new_order( $order_id ) {
+        // In a real application, you would save this to a custom table.
+        update_option( 'kura_ai_last_order', array(
+            'date' => current_time( 'mysql' ),
+            'order_id' => $order_id,
+        ) );
+    }
+
+    /**
+     * Log a product update.
+     *
+     * @since    1.0.0
+     * @param    int    $product_id    The ID of the product.
+     */
+    public function update_product( $product_id ) {
+        // In a real application, you would save this to a custom table.
+        update_option( 'kura_ai_last_product_update', array(
+            'date' => current_time( 'mysql' ),
+            'product_id' => $product_id,
+        ) );
+    }
+
+    /**
+     * Log an order status change.
+     *
+     * @since    1.0.0
+     * @param    int      $order_id    The ID of the order.
+     * @param    string   $old_status  The old status of the order.
+     * @param    string   $new_status  The new status of the order.
+     */
+    public function order_status_changed( $order_id, $old_status, $new_status ) {
+        // In a real application, you would save this to a custom table.
+        update_option( 'kura_ai_last_order_status_change', array(
+            'date' => current_time( 'mysql' ),
+            'order_id' => $order_id,
+            'old_status' => $old_status,
+            'new_status' => $new_status,
+        ) );
+    }
+}
diff --git a/includes/class-kura-ai.php b/includes/class-kura-ai.php
index fd51d22..f448dce 100644
--- a/includes/class-kura-ai.php
+++ b/includes/class-kura-ai.php
@@ -45,11 +45,19 @@ class Kura_AI {
         require_once KURA_AI_PLUGIN_DIR . 'includes/ai-integrations/class-kura-ai-openai.php';
         require_once KURA_AI_PLUGIN_DIR . 'includes/ai-integrations/class-kura-ai-gemini.php';
         require_once KURA_AI_PLUGIN_DIR . 'includes/class-kura-ai-oauth-handler.php';
+        require_once KURA_AI_PLUGIN_DIR . 'includes/class-kura-ai-helper.php';

         // Admin and public interfaces
         require_once KURA_AI_PLUGIN_DIR . 'admin/class-kura-ai-admin.php';
         require_once KURA_AI_PLUGIN_DIR . 'public/class-kura-ai-public.php';

+        // WooCommerce admin interface
+        if ( class_exists( 'WooCommerce' ) ) {
+            require_once KURA_AI_PLUGIN_DIR . 'admin/class-kura-ai-woocommerce-admin.php';
+            require_once KURA_AI_PLUGIN_DIR . 'includes/class-kura-ai-woocommerce-cron.php';
+            require_once KURA_AI_PLUGIN_DIR . 'includes/class-kura-ai-woocommerce-hooks.php';
+        }
+
         $this->loader = new Kura_AI_Loader();
     }

@@ -67,6 +75,27 @@ class Kura_AI {
         $this->loader->add_action('admin_menu', $plugin_admin, 'add_admin_menu');
         $this->loader->add_action('admin_init', $plugin_admin, 'register_settings');

+        // WooCommerce admin hooks
+        if ( class_exists( 'WooCommerce' ) ) {
+            $plugin_woocommerce_admin = new Kura_AI_WooCommerce_Admin( $this->get_plugin_name(), $this->get_version() );
+            $this->loader->add_action( 'admin_menu', $plugin_woocommerce_admin, 'add_admin_menu' );
+        }
+
+        // WooCommerce admin hooks
+        if ( class_exists( 'WooCommerce' ) ) {
+            $plugin_woocommerce_admin = new Kura_AI_WooCommerce_Admin( $this->get_plugin_name(), $this->get_version() );
+            $this->loader->add_action( 'admin_menu', $plugin_woocommerce_admin, 'add_admin_menu' );
+
+            $plugin_woocommerce_cron = new Kura_AI_WooCommerce_Cron( $this->get_plugin_name(), $this->get_version() );
+            $this->loader->add_action( 'init', $plugin_woocommerce_cron, 'schedule_cron' );
+            $this->loader->add_action( 'kura_ai_woocommerce_checkup', $plugin_woocommerce_cron, 'run_checkup' );
+
+            $plugin_woocommerce_hooks = new Kura_AI_WooCommerce_Hooks( $this->get_plugin_name(), $this->get_version() );
+            $this->loader->add_action( 'woocommerce_new_order', $plugin_woocommerce_hooks, 'new_order' );
+            $this->loader->add_action( 'woocommerce_update_product', $plugin_woocommerce_hooks, 'update_product' );
+            $this->loader->add_action( 'woocommerce_order_status_changed', $plugin_woocommerce_hooks, 'order_status_changed', 10, 3 );
+        }
+
         // Security scan and fix handlers
         $this->loader->add_action('wp_ajax_kura_ai_run_scan', $plugin_admin, 'ajax_run_scan');
         $this->loader->add_action('wp_ajax_kura_ai_apply_fix', $plugin_admin, 'ajax_apply_fix');
diff --git a/languages/kura-ai.pot b/languages/kura-ai.pot
index f5271b6..a4a35ce 100644
--- a/languages/kura-ai.pot
+++ b/languages/kura-ai.pot
@@ -26,6 +26,70 @@ msgstr ""
 msgid "Vulnerability Reports"
 msgstr ""

+#: admin/class-kura-ai-woocommerce-admin.php:89
+msgid "AI Store Audit"
+msgstr ""
+
+#: admin/class-kura-ai-woocommerce-admin.php:97
+msgid "Competitor Audit"
+msgstr ""
+
+#: admin/partials/kura-ai-woocommerce-audit-display.php:3
+msgid "Audit your WooCommerce store with the power of AI."
+msgstr ""
+
+#: admin/partials/kura-ai-woocommerce-audit-display.php:4
+msgid "Run AI Audit"
+msgstr ""
+
+#: admin/partials/kura-ai-competitor-audit-display.php:3
+msgid "Audit your competitor's store with the power of AI."
+msgstr ""
+
+#: admin/partials/kura-ai-competitor-audit-display.php:6
+msgid "Competitor URL"
+msgstr ""
+
+#: admin/class-kura-ai-woocommerce-admin.php:143
+msgid "You do not have sufficient permissions to perform this action."
+msgstr ""
+
+#: admin/class-kura-ai-woocommerce-admin.php:147
+msgid "WooCommerce is not installed or activated."
+msgstr ""
+
+#: admin/class-kura-ai-woocommerce-admin.php:191
+msgid "Please enter a competitor URL."
+msgstr ""
+
+#: admin/class-kura-ai-admin.php:111
+msgid "WooCommerce Settings"
+msgstr ""
+
+#: admin/class-kura-ai-admin.php:118
+msgid "Scheduled Checkup Frequency"
+msgstr ""
+
+#: admin/class-kura-ai-admin.php:129
+msgid "Disabled"
+msgstr ""
+
+#: admin/class-kura-ai-admin.php:130
+msgid "Hourly"
+msgstr ""
+
+#: admin/class-kura-ai-admin.php:131
+msgid "Daily"
+msgstr ""
+
+#: admin/class-kura-ai-admin.php:132
+msgid "Weekly"
+msgstr ""
+
+#: admin/class-kura-ai-admin.php:133
+msgid "Monthly"
+msgstr ""
+
 #: admin/class-kura-ai-admin.php:58
 msgid "Reports"
 msgstr ""
diff --git a/public/class-kura-ai-public.php b/public/class-kura-ai-public.php
index 6d60261..39c88dd 100644
--- a/public/class-kura-ai-public.php
+++ b/public/class-kura-ai-public.php
@@ -47,13 +47,6 @@ class Kura_AI_Public
      */
     public function enqueue_styles()
     {
-        wp_enqueue_style(
-            $this->plugin_name,
-            plugin_dir_url(__FILE__) . '../assets/css/kura-ai-public.css',
-            array(),
-            $this->version,
-            'all',
-        );
     }

     /**
@@ -65,7 +58,7 @@ class Kura_AI_Public
     {
         wp_enqueue_script(
             $this->plugin_name,
-            plugin_dir_url(__FILE__) . '../assets/js/kura-ai-public.js',
+            plugin_dir_url(__FILE__) . 'js/kura-ai-public.js',
             array('jquery'),
             $this->version,
             false,
diff --git a/admin/js/kura-ai-public.js b/public/js/kura-ai-public.js
similarity index 100%
rename from admin/js/kura-ai-public.js
rename to public/js/kura-ai-public.js
diff --git a/woocommerce-features.patch b/woocommerce-features.patch
new file mode 100644
index 0000000..42ce31c
