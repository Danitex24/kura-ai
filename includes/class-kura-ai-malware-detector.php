<?php
/**
 * The malware detection functionality of the plugin.
 *
 * @link       https://danovatesolutions.org
 * @since      1.0.0
 *
 * @package    Kura_AI
 * @subpackage Kura_AI/includes
 */

namespace Kura_AI;

// Exit if accessed directly
if (!defined('\ABSPATH')) {
    exit;
}

// Import WordPress core files
require_once \ABSPATH . 'wp-admin/includes/file.php';
require_once \ABSPATH . 'wp-includes/pluggable.php';

// Import WordPress core classes
use WP_Error;

// Import WordPress functions
use function get_option;
use function update_option;
use function wp_kses_post;
use function esc_html__;
use function wp_remote_get;
use function wp_remote_retrieve_body;
use function wp_remote_retrieve_response_code;
use function is_wp_error;
use function wp_json_encode;
use function time;
use function date_i18n;
use function file_exists;
use function file_get_contents;
use function md5_file;
use function preg_match;
use function preg_replace;
use function str_replace;
use function count;
use function sprintf;
use function __;

// WordPress functions are now imported with use statements

// Removed redundant function declaration for is_wp_error as it's now imported with use statement

/**
 * The malware detection class of the plugin.
 *
 * This class handles all malware detection operations including:
 * - AI-powered pattern recognition
 * - File scanning and analysis
 * - Threat detection and classification
 * - Integration with OpenAI for advanced analysis
 *
 * @package    Kura_AI
 * @subpackage Kura_AI/includes
 * @author     Daniel Abughdyer <daniel@danovatesolutions.org>
 */
class Kura_AI_Malware_Detector {

    /**
     * The OpenAI client instance.
     *
     * @since    1.0.0
     * @access   private
     * @var      Kura_AI_OpenAI    $ai_client    The OpenAI client instance.
     */
    private $ai_client;

    /**
     * Database interface for malware patterns.
     *
     * @since    1.0.0
     * @access   private
     * @var      wpdb    $wpdb    WordPress database interface.
     */
    private $wpdb;

    /**
     * Plugin settings.
     *
     * @since    1.0.0
     * @access   private
     * @var      array    $settings    Plugin settings.
     */
    private $settings;

    /**
     * Initialize the class and set its properties.
     *
     * @since    1.0.0
     */
    public function __construct() {
        global $wpdb;
        $this->wpdb = $wpdb;
        $this->settings = \get_option('kura_ai_settings');
        $this->ai_client = new Kura_AI_OpenAI();

        // Register cron callback
        \add_action('kura_ai_malware_scan', array($this, 'run_scheduled_scan'));
    }

    /**
     * Run a complete malware scan.
     *
     * @since    1.0.0
     * @return   array    Scan results with detected threats.
     */
    public function run_scan() {
        $results = array(
            'scan_start_time' => \current_time('mysql'),
            'threats_detected' => array(),
            'files_scanned' => 0,
            'scan_status' => 'in_progress'
        );

        try {
            // Get all WordPress files
            $files = $this->get_wordpress_files();
            $results['total_files'] = \count($files);

            // Get known malware patterns
            $patterns = $this->get_malware_patterns();

            foreach ($files as $file) {
                $file_content = \file_get_contents($file);
                $results['files_scanned']++;

                // Basic pattern matching
                $pattern_matches = $this->match_patterns($file_content, $patterns);

                // AI-powered analysis for suspicious files
                if (!empty($pattern_matches)) {
                    $ai_analysis = $this->analyze_with_ai($file_content);
                    
                    if ($ai_analysis['confidence'] >= $this->settings['malware_detection']['ai_threshold']) {
                        $threat = array(
                            'file' => $file,
                            'patterns' => $pattern_matches,
                            'ai_confidence' => $ai_analysis['confidence'],
                            'ai_explanation' => $ai_analysis['explanation'],
                            'detection_time' => \current_time('mysql'),
                            'severity' => $this->calculate_severity($pattern_matches, $ai_analysis)
                        );

                        $results['threats_detected'][] = $threat;
                        $this->log_threat($threat);
                    }
                }
            }

            $results['scan_status'] = 'completed';
            $results['scan_end_time'] = \current_time('mysql');

            // Update last scan time
            $this->settings['last_scan'] = \time();
            \update_option('kura_ai_settings', $this->settings);

            // Store results in database
            $this->store_scan_results($results);

            return $results;

        } catch (\Exception $e) {
            $results['scan_status'] = 'failed';
            $results['error'] = $e->getMessage();
            return $results;
        }
    }

    /**
     * Run scheduled malware scan.
     *
     * @since    1.0.0
     */
    public function run_scheduled_scan() {
        if ($this->settings['malware_detection']['enabled']) {
            $results = $this->run_scan();
            
            if (!empty($results['threats_detected'])) {
                $this->send_threat_notification($results);
            }
        }
    }

    /**
     * Get all WordPress files for scanning.
     *
     * @since    1.0.0
     * @return   array    Array of file paths.
     */
    private function get_wordpress_files() {
        $files = array();
        $root_dir = ABSPATH;

        $iterator = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($root_dir),
            RecursiveIteratorIterator::SELF_FIRST
        );

        foreach ($iterator as $file) {
            if ($file->isFile() && $this->should_scan_file($file)) {
                $files[] = $file->getPathname();
            }
        }

        return $files;
    }

    /**
     * Check if a file should be scanned.
     *
     * @since    1.0.0
     * @param    SplFileInfo    $file    File information.
     * @return   boolean                 Whether the file should be scanned.
     */
    private function should_scan_file($file) {
        // Skip dot files
        if ($file->getBasename()[0] === '.') {
            return false;
        }

        // Get file extension
        $extension = strtolower($file->getExtension());

        // List of file types to scan
        $scan_extensions = array('php', 'js', 'html', 'htm', 'css');

        return in_array($extension, $scan_extensions);
    }

    /**
     * Get known malware patterns from database.
     *
     * @since    1.0.0
     * @return   array    Array of malware patterns.
     */
    private function get_malware_patterns() {
        $table_name = $this->wpdb->prefix . 'kura_ai_malware_patterns';
        return $this->wpdb->get_results("SELECT * FROM {$table_name}", ARRAY_A);
    }

    /**
     * Match file content against known malware patterns.
     *
     * @since    1.0.0
     * @param    string    $content     File content.
     * @param    array     $patterns    Malware patterns.
     * @return   array                  Matched patterns.
     */
    private function match_patterns($content, $patterns) {
        $matches = array();

        foreach ($patterns as $pattern) {
            if (preg_match('/' . $pattern['pattern_signature'] . '/i', $content)) {
                $matches[] = $pattern;
            }
        }

        return $matches;
    }

    /**
     * Analyze suspicious content with AI.
     *
     * @since    1.0.0
     * @param    string    $content    File content to analyze.
     * @return   array                 AI analysis results.
     */
    private function analyze_with_ai($content) {
        $prompt = $this->build_ai_prompt($content);
        $response = $this->ai_client->analyze_code($prompt);

        return array(
            'confidence' => $this->calculate_ai_confidence($response),
            'explanation' => $response['explanation'] ?? ''
        );
    }

    /**
     * Build AI prompt for code analysis.
     *
     * @since    1.0.0
     * @param    string    $content    File content to analyze.
     * @return   string               Formatted prompt for AI analysis.
     */
    private function build_ai_prompt($content) {
        return "Analyze the following code for potential security threats and malware patterns:\n\n" .
               $content . "\n\n" .
               "Provide a detailed analysis of any suspicious patterns, potential vulnerabilities, " .
               "or malicious code. Rate the likelihood of malware on a scale of 0 to 1.";
    }

    /**
     * Calculate AI confidence score from response.
     *
     * @since    1.0.0
     * @param    array     $response    AI response.
     * @return   float                  Confidence score (0-1).
     */
    private function calculate_ai_confidence($response) {
        // Extract confidence score from AI response
        // Implementation depends on AI response format
        return isset($response['confidence']) ? floatval($response['confidence']) : 0.0;
    }

    /**
     * Calculate threat severity based on patterns and AI analysis.
     *
     * @since    1.0.0
     * @param    array    $patterns       Matched patterns.
     * @param    array    $ai_analysis    AI analysis results.
     * @return   string                   Severity level (low, medium, high, critical).
     */
    private function calculate_severity($patterns, $ai_analysis) {
        $max_pattern_severity = 'low';
        $severity_levels = array('low' => 1, 'medium' => 2, 'high' => 3, 'critical' => 4);

        // Get highest severity from patterns
        foreach ($patterns as $pattern) {
            if ($severity_levels[$pattern['severity']] > $severity_levels[$max_pattern_severity]) {
                $max_pattern_severity = $pattern['severity'];
            }
        }

        // Adjust severity based on AI confidence
        if ($ai_analysis['confidence'] >= 0.9) {
            return 'critical';
        } elseif ($ai_analysis['confidence'] >= 0.7) {
            return 'high';
        } elseif ($ai_analysis['confidence'] >= 0.5) {
            return $max_pattern_severity;
        }

        return 'low';
    }

    /**
     * Log detected threat to database.
     *
     * @since    1.0.0
     * @param    array    $threat    Threat information.
     */
    private function log_threat($threat) {
        $table_name = $this->wpdb->prefix . 'kura_ai_logs';
        
        $this->wpdb->insert(
            $table_name,
            array(
                'log_type' => 'malware_detection',
                'log_message' => sprintf(
                    'Malware detected in file: %s with confidence: %f',
                    $threat['file'],
                    $threat['ai_confidence']
                ),
                'log_data' => maybe_serialize($threat),
                'severity' => $threat['severity']
            ),
            array('%s', '%s', '%s', '%s')
        );
    }

    /**
     * Store scan results in database.
     *
     * @since    1.0.0
     * @param    array    $results    Scan results.
     */
    private function store_scan_results($results) {
        $table_name = $this->wpdb->prefix . 'kura_ai_security_reports';
        
        $this->wpdb->insert(
            $table_name,
            array(
                'report_type' => 'malware_scan',
                'report_data' => \maybe_serialize($results),
                'created_at' => \current_time('mysql')
            ),
            array('%s', '%s', '%s')
        );
    }

    /**
     * Send notification about detected threats.
     *
     * @since    1.0.0
     * @param    array    $results    Scan results.
     */
    private function send_threat_notification($results) {
        if (!$this->settings['email_notifications']) {
            return;
        }

        $to = $this->settings['notification_email'];
        $subject = sprintf(
            '[%s] Malware Threats Detected - Action Required',
            \get_bloginfo('name')
        );

        $message = $this->build_notification_message($results);
        $headers = array('Content-Type: text/html; charset=UTF-8');

        \wp_mail($to, $subject, $message, $headers);
    }

    /**
     * Build HTML message for threat notification.
     *
     * @since    1.0.0
     * @param    array     $results    Scan results.
     * @return   string               Formatted HTML message.
     */
    private function build_notification_message($results) {
        \ob_start();
        ?>
        <h2>Security Threat Alert</h2>
        <p>The latest malware scan has detected potential security threats on your website.</p>
        
        <h3>Scan Details:</h3>
        <ul>
            <li>Scan Start: <?php echo $results['scan_start_time']; ?></li>
            <li>Files Scanned: <?php echo $results['files_scanned']; ?></li>
            <li>Threats Detected: <?php echo \count($results['threats_detected']); ?></li>
        </ul>

        <h3>Detected Threats:</h3>
        <table style="border-collapse: collapse; width: 100%;">
            <tr style="background-color: #f2f2f2;">
                <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">File</th>
                <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Severity</th>
                <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">AI Confidence</th>
            </tr>
            <?php foreach ($results['threats_detected'] as $threat): ?>
            <tr>
                <td style="border: 1px solid #ddd; padding: 8px;"><?php echo esc_html($threat['file']); ?></td>
                <td style="border: 1px solid #ddd; padding: 8px;"><?php echo esc_html($threat['severity']); ?></td>
                <td style="border: 1px solid #ddd; padding: 8px;"><?php echo number_format($threat['ai_confidence'] * 100, 1); ?>%</td>
            </tr>
            <?php endforeach; ?>
        </table>

        <p style="margin-top: 20px;">
            <strong>Important:</strong> Please log in to your WordPress dashboard and review these threats immediately.
            You can access the security dashboard here:
            <a href="<?php echo esc_url(admin_url('admin.php?page=kura-ai-security')); ?>">
                Security Dashboard
            </a>
        </p>
        <?php
        return ob_get_clean();
    }
}